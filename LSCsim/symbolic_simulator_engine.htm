<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Symbolic Simulator Engine for LS</title>
</head>

<body>

<p align="center"><b><font size="5">Symbolic Simulator Engine for Live Sequence 
Charts (LSCs)</font></b></p>
<hr>
<p><b><font size="4">General Description</font></b></p>
<p>The is the simulator to symbolically execute and check behavioral 
requirements specified by Live Sequence Charts (LSC). This simulator searches 
all legal execution paths. When a violation is detected, the simulator can 
automatically backtrack and continue searching. It supports symbolic variables, 
objects/instances and time constraints, so that we can simulate multiple 
scenarios at one go. For example, several scenarios which only differ from each 
other in the value of a variable may be executed as a single scenario where the 
variable value is left uninstantiated. Similarly, we can simulate scenarios with 
an unbounded number of objects. Technical details about this simulator can be 
found in paper &quot;<a href="../pdf/padl04.pdf">Symbolic Execution of Behavioral Requirements</a>&quot;.
</p> 
<hr>
<p><b><font size="4">Implementation Language</font></b></p>
<p>This simulator is implemented on top of the ECLiPSe Constraint Logic 
Programming System. The information for ECLiPSe is available at
<a href="http://eclipse.crosscoreoptimization.com/">
http://eclipse.crosscoreoptimization.com/</a>. We run the simulator on ECLiPSe 
5.7, on top of SunOS 5.8.</p> 
<hr>
<p><b><font size="4">How to execute</font></b></p>
<p>After loading the engine.pl and the description files for input models into 
ECLiPSe, you can either type &quot;begin.&quot; or &quot;allsolution.&quot; to execute the program. 
With the &quot;begin.&quot; command, the simulator tries to find one legal execution path. 
It will pause whenever such an legal path is found, or all possibilities have 
been considered. With the &quot;allsolution.&quot; command, the simulator tries to find 
all legal execution paths.<br><br>The trace of the legal execution path will be 
displayed after the simulation finds such a paths. When a violation is detected, 
the simulator reports the trace of the illegal path, and automatically 
backtracks to find the illegal one. In other words, our simulator intends to 
find a possible execution.</p>
<p>The input can be changed by revising the input messages in the &quot;begin&quot; 
predicate. The format for messages is described below.</p> 
<hr>
<p><b><font size="4">Non-trivial Examples</font></b></p>
<ul>
	<li>Car's behaviors of a rail-car system, including departing and arriving 
	(model2.pl). <a href="example/model2.jpg">LSC</a></li>
	<li>Set the phone's number when a user dials a number and then click the Set 
	button (model5.pl). <a href="example/model5.jpg">LSC</a></li>
	<li>Part of the conversation establishment protocol (model4.pl).
	<a href="example/model4.jpg">LSC</a></li>
</ul>
<hr>
<p align="left"><font size="4"><b>Where are the examples we provides from</b></font></p>
<ul>
	<li>
	<p align="left">model1.pl: the <a href="example/model1.bmp">Figure </a> 
	</p></li>
	<li>
	<p align="left">model2.pl: the <a href="example/model2.jpg">Figure</a> 10 in 
	paper &quot;LSCs: Breathing Life into Message Sequence Charts&quot;</p>
	</li>
	<li>
	<p align="left">model3.pl: the <a href="example/model3.jpg">Figure</a> 7(a) 
	in paper &quot;Symbolic Execution of Behavioral Requirements&quot;</p>
	</li>
	<li>
	<p align="left">model4.pl: the<a href="example/model4.jpg"> Figure</a> 13 in 
	paper&nbsp; &quot;Multiple Instances and Symbolic Variables in Executable 
	Sequence Charts&quot;</p></li>
	<li>
	<p align="left">model5.pl: the <a href="example/model5.jpg">Figure</a> 11 in 
	paper&nbsp; &quot;Multiple Instances and Symbolic Variables in Executable 
	Sequence Charts&quot;</p></li>
	<li>
	<p align="left">model6.pl: the <a href="example/model6.jpg">Figure</a> 4 in 
	paper &quot;Symbolic Execution of Behavioral Requirements&quot;</p>
	</li>
</ul>
<p align="left"><br>We also attach pictures for these example. For description 
about these example, please refer to relevant papers. </p>
<p align="left">NOTE: Our LCS charts in model2.pl,model4.pl and model5.pl are 
NOT exactly the same as the original ones in the papers. </p>
<hr>
<p><b><font size="4">Relevant Data Structure</font></b></p>
<p>The data structure of a live copy is [ChartName, MainChart, PreChart, 
ChartSymbolicInstanctList, ChartVarList, Cut], which describes the name of a 
chart that the live copy is generated from, the events and control flow for the 
main chart, the events and control flow for the prechart, which instances are 
currently represented by this live copy, the state variables of the chart, and 
next execution point of the copy, respectively.</p>
<p>ChartSymbolicInstanctList= [[Instance1, IntervalList1], [Instance2, 
IntervalList2], ...], represent the InvervalListN of the InstanceN, in a live 
copy of a chart. The format of interval list is [[Min1, Max1], [Min2, 
Max2],....[Min_n]], where [Min1, Max1] represents numbers which are no less than 
Min1 and less than Max1, and [Min_n] represents number which are no less than 
Min_n.<br><br>Cut= [Temperature, LocationList], where Temperature is the 
temperature of this cut, and LocationList describes the progress line of each 
chart during the execution.</p>
<p>The format of the input message is [Type, SenderClass, SenderConstraints, 
ReceiverClass, ReceiverConstraints, Message, Temperature]. The Type should be 
either&nbsp;asend or arecv, representing asynchronous sending and receiving, 
repectively. SenderClass and ReceiverClass are object classes. SenderConstraints 
and ReceiverConstraints are interval list to specify objects. SenderConstraints 
and ReceiverConstraints are either [] (representing non-symbolic objects), or 
interval lists (representing symbolic objects). Note that we ONLY differ 
non-symbolic and symbolic objects when input and output, and treat non-symbolic 
objects as special symbolic objects (with interval list=[[0,0]]) during 
execution. Temperature means whether the message must be received if it is sent.</p>
<hr>
<p><b><font size="4">Download</font></b></p>
<p>&nbsp;&nbsp;&nbsp;
<a href="simulator.tar.gz">simulator.tar.gz</a></p> 
<hr>
<p><b><font size="4">References</font></b></p>
<ul>
	<li>
	<p align="left"><span class="m">W. Damm, and D. Harel,</span> LSCs: 
	Breathing Life into Message Sequence Charts, 
	<i>Formal Methods in System Design</i>, 19(1):45--80, 2001.</p></li>
	<li>
	<p align="left"><span class="m">R. Marelly, D. Harel, and H. Kugler</span>, 
	Multiple Instances and Symbolic Variables in Executable Sequence Charts, In <i>
	International Conference on Object Oriented Programming, Systems, Languages 
	and Applications (OOPSLA)</i>, pages 83--100,2002.</p></li>
	<li>
	<p align="left"><b>T. Wang, A. Roychoudhury, R. H.C. Yap, and S.C. Choudhary.
	<a href="../pdf/padl04.pdf">Symbolic Execution of Behavioral Requirements</a>,
	<font face="Times New Roman"><i>International Symposium on Practical 
	Applications of Declarative Languages (PADL) 2004, LNCS 3057.&nbsp; </i>The 
	reader may read this paper to familiarize himself/herself with our 
	simulator.</font></b></p>
	</li>
</ul>
<hr>
<p>Last Modified:&nbsp; 20,Jan,2004</p>

</body>
 
</html>
