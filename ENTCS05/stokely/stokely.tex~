\documentclass{entcs} \usepackage{prentcsmacro}
\usepackage{graphicx}
\usepackage{amssymb,amsmath,epsfig,multicol}
\usepackage{algorithm,algorithmic}
%,subfigure}

\def\gap{\hspace{1.2em}}
\def\arraystretch{1.1}

\sloppy

\newcommand{\WPRE}{\mathcal{WP}}
\newcommand{\atomizer}{\emph{Atomiser}}
\newcommand{\catomizer}{\emph{ConcurrentAtomiser}}
\newcommand{\PREDS}{\ensuremath{\mathcal{P}}}
\def\QED{\begin{flushright}\mbox{\rule[0pt]{1.5ex}{1.5ex}\hspace{2cm}}\end{flushright}}

\def\lastname{Stokely, Chaki, and Ouaknine}

%setup a default path to search for graphics
\graphicspath{{./}{figures/}}

\begin{document}
\begin{frontmatter}
\title{Parallel Assignments in Software Model Checking}

\author{Murray Stokely\thanksref{murrayemail}}

\address{Google}

\author{Sagar Chaki%
              \thanksref{sagaremail}}

\address{Carnegie Mellon University, Software Engineering Institute,
Pittsburgh, USA}

\author{Jo\"el Ouaknine%
              \thanksref{joelemail}}

\address{Oxford University Computing Laboratory, UK}

\thanks[murrayemail]{Email: \href{mailto:mstokely@google.com}
            {\texttt{\normalshape mstokely@google.com}}}

\thanks[sagaremail]{Email: \href{mailto:chaki@sei.cmu.edu}
            {\texttt{\normalshape chaki@sei.cmu.edu}}}

\thanks[joelemail]{Email: \href{mailto:joel@comlab.ox.ac.uk}
            {\texttt{\normalshape joel@comlab.ox.ac.uk}}}

%
\begin{abstract}
In this paper we investigate how formal software verification systems
can be improved by utilising parallel assignment in weakest
precondition computations.

We begin with an introduction to modern software verification systems.
Specifically, we review the method in which software abstractions are
built using counterexample-guided abstraction refinement (CEGAR).  The
classical NP-complete parallel assignment problem is first posed, and
then an additional restriction is added to create a special case in
which the problem is tractable with an $O(n^2)$ algorithm.  The
parallel assignment problem is then discussed in the context of
weakest precondition computations.  In this special situation where
statements can be assumed to execute truly concurrently, we show that
any sequence of simple assignment statements without function calls
can be transformed into an equivalent parallel assignment block.

Results of compressing assignment statements into a parallel form with
this algorithm are presented for a wide variety of software
applications.  The proposed algorithms were implemented in the ComFoRT
reasoning framework \cite{comfort} and used to measure the improvement
in the verification of real software systems.  This improvement
in time proved to be significant for many classes of software.
\end{abstract}

\begin{keyword}
static analysis, software model checking, predicate abstraction,
parallel assignment.
\end{keyword}
\end{frontmatter}

\input{intro}
\input{parassign}
\input{results}
\input{conc}

\bibliographystyle{latex8}
% \bibliographystyle{alpha}
\bibliography{article}

\end{document}
